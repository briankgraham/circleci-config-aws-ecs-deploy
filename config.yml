version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.9.4
      - image: circleci/postgres:9.6-alpine-postgis-ram

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4
    environment:
      PG_URL:    localhost
      PG_USER:   postgres

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: yarn install

      - run: sudo apt install postgresql-client

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests! This test expects a initTestDb shell script. Feel free to change this.
      - run: yarn run initTestDb
      - run: yarn test
      # pip
      - run: sudo apt-get update && sudo apt-get install -qq -y python-pip libpython-dev
      - run: curl -O https://bootstrap.pypa.io/get-pip.py && sudo python get-pip.py
      # aws-cli
      - run: sudo pip install --upgrade awscli
      # Needed for ecs-deploy
      - run: sudo apt-get update && sudo apt-get install jq
      - run: sudo curl -L -o /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5rc1/jq-linux-x86_64-static && sudo chmod +x /usr/bin/jq
      # ecs-deploy
      - run: sudo curl -L -o /usr/bin/ecs-deploy https://raw.githubusercontent.com/silinternational/ecs-deploy/master/ecs-deploy && sudo chmod +x /usr/bin/ecs-deploy
      - setup_remote_docker:
          docker_layer_caching: true
          version: 17.03.0-ce
      - run: |
          if [ "${CIRCLE_BRANCH}" == "master" ] || [ "${CIRCLE_BRANCH}" == "staging" ];
            then
            # Login to AWS
            $(aws ecr get-login --no-include-email --region $AWS_REGION)
            TAG=$(echo $CIRCLE_SHA1 | cut -c -7)
            docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/your-app:$TAG .
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/your-app:$TAG
            ecs-deploy --timeout 420 -c $CLUSTER_NAME -n $SERVICE_NAME -i $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/your-app:$TAG
          fi